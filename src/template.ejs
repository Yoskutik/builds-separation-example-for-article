<%

const stats = JSON.parse(compilation.assets['StatsPlugin_allStats.json'].source());
delete compilation.assets['StatsPlugin_allStats.json'];

const modernInitialFiles = stats.modern.chunks
    .filter(it => it.initial)
    .flatMap(it => it.files);
const legacyInitialFiles = stats.legacy.chunks
    .filter(it => it.initial)
    .flatMap(it => it.files);

// Entry files must be injected for application to start
const entryFilesJSModern = modernInitialFiles.filter(it => it.endsWith('.js'));
const entryFilesJSLegacy = legacyInitialFiles.filter(it => it.endsWith('.js'));
const entryFilesCSSModern = modernInitialFiles.filter(it => it.endsWith('.css'));
const entryFilesCSSLegacy = legacyInitialFiles.filter(it => it.endsWith('.css'));

const modernPrefetchIds = stats.modern.chunks
    .flatMap(it => it.childrenByOrder?.prefetch ?? []);
const legacyPrefetchIds = stats.legacy.chunks
    .flatMap(it => it.childrenByOrder?.prefetch ?? []);

const modernPrefetchFiles = modernPrefetchIds
    .flatMap(id => stats.modern.chunks.find(it => it.id === id).files);
const legacyPrefetchFiles = legacyPrefetchIds
    .flatMap(id => stats.legacy.chunks.find(it => it.id === id).files);

const modernPrefetchFilesJS = modernPrefetchFiles.filter(it => it.endsWith('.js'));
const modernPrefetchFilesCSS = modernPrefetchFiles.filter(it => it.endsWith('.css'));
const legacyPrefetchFilesJS = legacyPrefetchFiles.filter(it => it.endsWith('.js'));
const legacyPrefetchFilesCSS = legacyPrefetchFiles.filter(it => it.endsWith('.css'));
%>

<!doctype html>
<html lang="en">
<link>
<meta charset="utf-8">
<title>Webpack App</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<script>
  !function () {
    // Force enabling legacy mode for debugging purposes
    if (location.search.indexOf('forced-legacy') !== -1) {
      window.LEGACY = true;
      // Force disabling legacy mode for debugging purposes
    } else if (location.search.indexOf('forced-modern') !== -1) {
      window.LEGACY = false;
    } else {
      try {
        // Polyfills check
        if (
          !('IntersectionObserver' in window) ||
          !('Promise' in window) ||
          !('fetch' in window) ||
          !('finally' in Promise.prototype)
        ) {
          throw {};
        }

        // Syntax check
        eval('const a = async ({ ...rest } = {}) => rest; let b = class {};');
        window.LEGACY = false;
      } catch (e) {
        window.LEGACY = true;
      }
    }

    function addPrefetch(src, as) {
      var link = document.createElement('link');
      link.rel = 'prefetch';
      link.as = as;
      link.href = src;
      document.head.appendChild(link);
    }

    var entryFilesJSModern = <%= JSON.stringify(entryFilesJSModern) %>;
    var entryFilesJSLegacy = <%= JSON.stringify(entryFilesJSLegacy) %>;
    var entryFilesCSSModern = <%= JSON.stringify(entryFilesCSSModern) %>;
    var entryFilesCSSLegacy = <%= JSON.stringify(entryFilesCSSLegacy) %>;

    // Use entry
    (LEGACY ? entryFilesJSLegacy : entryFilesJSModern).forEach(
      function (chunkName) {
        var link = document.createElement('script');
        link.defer = true;
        link.src = chunkName;
        document.head.appendChild(link);
      },
    );
    (LEGACY ? entryFilesCSSLegacy : entryFilesCSSModern).forEach(
      function (chunkName) {
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = chunkName;
        document.head.appendChild(link);
      },
    );

    var prefetchFilesJSModern = <%= JSON.stringify(modernPrefetchFilesJS) %>;
    var prefetchFilesCSSModern = <%= JSON.stringify(modernPrefetchFilesCSS) %>;
    var prefetchFilesJSLegacy = <%= JSON.stringify(legacyPrefetchFilesJS) %>;
    var prefetchFilesCSSLegacy = <%= JSON.stringify(legacyPrefetchFilesCSS) %>;

    // Prefetching all possible chunks
    (LEGACY ? prefetchFilesJSLegacy : prefetchFilesJSModern).forEach(
      function (chunkName) {
        addPrefetch(chunkName, 'script');
      },
    );
    (LEGACY ? prefetchFilesCSSLegacy : prefetchFilesCSSModern).forEach(
      function (chunkName) {
        addPrefetch(chunkName, 'style');
      },
    );
  }();
</script>
<style>
    body {
        background-color: #282c34;
        margin: 0;
    }
</style>
</head>
<body>
</body>
</html>